//Direkter Wert aus Mqtt mosquitto_sub -h 192.168.0.1 -t 'tele/hydro_box1/#'

//Grafana: https://data.veleda.io/?orgId=1
//Was noch nicht funktioniert:#
// 1. I2C Adresse des MAX44009 Ã¤ndern... ---> Erst einmal nur einen MAX44009 nutzen
// 2. 2 BME280 --> sind eigentlich BMP280....
// 3. BH1750 liefern Werte, diese werden jedoch nicht weitergereicht bzw. nicht in Grafana angezeigt
// Librarys
#include "Arduino.h"
#include "Max44009.h"

#include <WiFi.h>
#include <Wire.h>
#include "OneWire.h"
#include <PubSubClient.h>
#include <BH1750.h>
#include "SparkFunBME280.h"

//Globale Variablen & Pins
/* change it with your ssid-password */
const char* ssid = "";
const char* password = "";
const char* mqtt_server = "192.168.0.1";

const int oneWirePin = 32; //Dallas TempSensor Pin
const char led = 12; //LED GPIO Pin

//Objekte initialisieren
BH1750 lightMeter(0x23);
BH1750 lightMeter_2(0x5C);
Max44009 myLux(0x4A);  // default addr
//Max44009 myLux2(0x4B);
OneWire ds(oneWirePin); 
DallasTemperature sensors(&ds);
BME280 AirSensor;
//BME280 AirSensor2; 
/* create an instance of PubSubClient client */
WiFiClient espClient;
PubSubClient client(espClient);

float t[10];
String addr[10];
float tmin=200;
float tmax=0;
float tavg=0;

/* topics */
#define LUX_TOPIC     "tele/hydro_box1/lux"
#define LED_TOPIC     "cmnd/hydro_box1/led" /* 1=on, 0=off */
#define DALLAS_WT_TOPIC  "tele/hydro_box1/Dallas_WT" //Wassertemperatur
#define DALLAS_TT_TOPIC "tele/hydro_box1/Dallas_TT" //Towertemperatur
#define DALLAS_AT_TOPIC "tele/hydro_box1/Dallas_AT" //Airtemperatur
#define BME_T_TOPIC "tele/hydro_box1/BME280_T" //Lufttemperatur
//#define BME_T2_TOPIC "tele/hydro_box1/BME280_LT2" //Lufttemperatur
#define BME_RF_TOPIC "tele/hydro_box1/BME280_RF" //Luftfeuchtigkeit
//#define BME_RF2_TOPIC "tele/hydro_box1/BME280_RF2" //Luftfeuchtigkeit
#define BME_P_TOPIC "tele/hydro_box1/BME280_P" //Luftdruck
//#define BME_P2_TOPIC "tele/hydro_box1/BME280_P" //Luftdruck
#define BH1750_L_TOPIC "tele/hydro_box1/BH1750_L" //Licht
#define BH1750_L2_TOPIC "tele/hydro_box1/BH1750_L2" //Licht
#define MAX44009_L_TOPIC "tele/hydro_box1/MAX44009_L" //Licht
//#define MAX44009_L2_TOPIC "tele/hydro_box1/MAX44009_L2" //Licht

//Speichervariablen
float lux_MAX=0;
int lux_BH1750=0;
int lux_BH1750_2=0;
float dallas_WT=0;  //Watertemperature
float dallas_TT=0;  //TowerTemperature
float dallas_AT=0;  //WaterTemperature
float bme_T=0;
float bme_RF=0;
float bme_P=0;


uint32_t lastDisplay = 0;

long lastMsg = 0;
char msg[20];

void receivedCallback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message received: ");
  Serial.println(topic);

  Serial.print("payload: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  /* we got '1' -> on */
  if ((char)payload[0] == '1') {
    digitalWrite(led, HIGH); 
  } else {
    /* we got '0' -> on */
    digitalWrite(led, LOW);
  }

}

void mqttconnect() {
  // Loop until reconnected 
  while (!client.connected()) {
    Serial.print("MQTT connecting ...");
    // client ID 
    String clientId = "ESP32Client";
    // connect now 
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // subscribe topic with default QoS 0
      client.subscribe(LED_TOPIC);
    } else {
      Serial.print("failed, status code =");
      Serial.print(client.state());
      Serial.println("try again in 5 seconds");
      // Wait 5 seconds before retrying 
      delay(5000);
    }
  }
}

void setup()
{
//  pinMode(oneWirePin, OUTPUT);
//  pinMode(oneWirePin, INPUT);

  Serial.begin(115200);
  Wire.begin();
  lightMeter.begin(BH1750::ONE_TIME_HIGH_RES_MODE);
  lightMeter_2.begin(BH1750::ONE_TIME_HIGH_RES_MODE); 
  AirSensor.setI2CAddress(0x77);
  AirSensor.beginI2C(Wire);
  //AirSensor2.setI2CAddress(0x76);
  //AirSensor2.beginI2C(Wire);

  /* set led as output to control led on-off */
  pinMode(led, OUTPUT);

  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
}

void loop()
{
  
  delay(1000);
//BH1750
  Serial.println("BH1750");
  uint16_t lux_BH1750 = lightMeter.readLightLevel(); Serial.print("   ");
  Serial.print("Light: ");
  Serial.print(lux_BH1750);
  Serial.println(" lx"); Serial.print("   ");



  delay(100);
  uint16_t lux_BH1750_2 = lightMeter_2.readLightLevel();
  Serial.print("Light: ");
  Serial.print(lux_BH1750_2);
  Serial.println(" lx");




    delay(1000);
//BME280
  Serial.println("BME280");
    Serial.print("   Humidity: ");
  bme_RF=AirSensor.readFloatHumidity();
  Serial.println(bme_RF,2);
  Serial.print("   Pressure: ");
  bme_P=AirSensor.readFloatPressure();
  Serial.println(bme_P, 0);
  Serial.print("   Temp: ");
  bme_T= AirSensor.readTempC();
  Serial.println(bme_T, 2);
/*
  Serial.print("Humidity: ");
  Serial.println(AirSensor2.readFloatHumidity(), 0);
  Serial.print(" Pressure: ");
  Serial.println(AirSensor2.readFloatPressure(), 0);
  Serial.print(" Alt: ");
  Serial.println(AirSensor2.readFloatAltitudeMeters(), 1);
  Serial.print(" Temp: ");
  Serial.println(AirSensor2.readTempC(), 2);
  */
delay(1000);
  Serial.println("MAX44009");
    lux_MAX = myLux.getLux();
 //   float lux2 = myLux2.getLux();
    int err = myLux.getError();
 //   int err2 = myLux2.getError();
    if (err != 0)
    {
      Serial.print("Error:\t");
      Serial.println(err);
    }
    else
    {
      Serial.print("lux:\t");
      Serial.println(lux_MAX);


    }
/*
    if (err2 != 0)
    {
      Serial.print("Error:\t");
      Serial.println(err2);
    }
    else
    {
      Serial.print("lux:\t");
      Serial.println(lux2);

      snprintf (msg, 20, "%lf", lux2);
      // publish the message 
      client.publish(MAX44009_L2_TOPIC, msg);
    }
*/
delay(1000);
  //DS18B20
  Serial.println("DS18B20");
  

{
byte i;
byte present = 0;
byte type_s;
byte data[12];
byte addr[8];
float celsius, fahrenheit;
 
if ( !ds.search(addr))
{
ds.reset_search();
delay(250);
return;
}
 
if (OneWire::crc8(addr, 7) != addr[7])
{
Serial.println("CRC is not valid!");
return;
}
//Serial.println();
 
// the first ROM byte indicates which chip
switch (addr[0])
{
case 0x10:
type_s = 1;
break;
case 0x28:
type_s = 0;
break;
case 0x22:
type_s = 0;
break;
default:
Serial.println("Device is not a DS18x20 family device.");
return;
}
 
ds.reset();
ds.select(addr);
ds.write(0x44, 1); // start conversion, with parasite power on at the end
delay(1000);
present = ds.reset();
ds.select(addr);
ds.write(0xBE); // Read Scratchpad
 
for ( i = 0; i < 9; i++)
{
data[i] = ds.read();
}
 
// Convert the data to actual temperature
int16_t raw = (data[1] << 8) | data[0];
if (type_s) {
raw = raw << 3; // 9 bit resolution default
if (data[7] == 0x10)
{
raw = (raw & 0xFFF0) + 12 - data[6];
}
}
else
{
byte cfg = (data[4] & 0x60);
if (cfg == 0x00) raw = raw & ~7; // 9 bit resolution, 93.75 ms
else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
 
}
celsius = (float)raw / 16.0;
fahrenheit = celsius * 1.8 + 32.0;
Serial.print("Temperature = ");
Serial.print(celsius);
Serial.print(" Celsius, ");
Serial.print(fahrenheit);
Serial.println(" Fahrenheit");
}
delay(500);
//Verbinde mit WLAN
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // configure the MQTT server with IPaddress and port 
  client.setServer(mqtt_server, 1883);
  // this receivedCallback function will be invoked 
  //when client received subscribed topic 
  client.setCallback(receivedCallback);

  /* if client was disconnected then try to reconnect again */
  if (!client.connected()) {
    mqttconnect();
  }
  /* this function will listen for incomming 
  subscribed topic-process-invoke receivedCallback */
  client.loop();
    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", lux_MAX);
        /* publish the message */
    client.publish(MAX44009_L_TOPIC, msg);
    
    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", (float)lux_BH1750);
        /* publish the message */
    client.publish(BH1750_L_TOPIC, msg);
    
    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", (float)lux_BH1750_2);
         // publish the message
    client.publish(BH1750_L2_TOPIC, msg);


    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", bme_T);
    client.publish(BME_T_TOPIC, msg);

    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", bme_P);
    client.publish(BME_P_TOPIC, msg);

    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", bme_RF);
    client.publish(BME_RF_TOPIC, msg);

    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", dallas_WT);
    client.publish(DALLAS_WT_TOPIC, msg);

    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", dallas_TT);
    client.publish(DALLAS_TT_TOPIC, msg);

    memset(msg, 0, sizeof(msg));
    snprintf (msg, 20, "%lf", dallas_AT);
    client.publish(DALLAS_AT_TOPIC, msg);

    delay(1000);
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("WLAN nicht aus");
  } else {Serial.println("WLAN aus");}
  
  ESP.restart();

}
